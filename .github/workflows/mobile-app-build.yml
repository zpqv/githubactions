name: Mobile App Build

on:
  workflow_dispatch:
    inputs:
      project_url:
        description: 'Azure DevOps Git repo URL (omit https://)'
        required: true

jobs:
  build:
    runs-on: macos-13
    env:
      FLUTTER_HOME: ~/.flutter

    steps:
      - name: Check Secrets (safe debug)
        run: |
          echo "Git user is set: ${AZURE_GIT_USERNAME:+yes}"
          echo "PAT is set: ${AZURE_PAT:+yes}"
        env:
          AZURE_GIT_USERNAME: ${{ secrets.AZURE_GIT_USERNAME }}
          AZURE_PAT: ${{ secrets.AZURE_PAT }}

      - name: Checkout this GitHub repo
        uses: actions/checkout@v4

      - name: Clone Azure DevOps project
        run: |
          git config --global http.sslVerify false
          git clone https://${AZURE_GIT_USERNAME}:${AZURE_PAT}@${{ github.event.inputs.project_url }} project
        env:
          AZURE_GIT_USERNAME: ${{ secrets.AZURE_GIT_USERNAME }}
          AZURE_PAT: ${{ secrets.AZURE_PAT }}

      - name: Cache Flutter SDK
        id: flutter-cache
        uses: actions/cache@v3
        with:
          path: ~/.flutter
          key: ${{ runner.os }}-flutter-stable
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Install Flutter if not cached
        if: steps.flutter-cache.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/flutter/flutter.git -b stable ~/.flutter

      - name: Add Flutter to PATH
        run: echo "$HOME/.flutter/bin" >> $GITHUB_PATH

      - name: Cache Pub Packages
        id: pub-cache
        uses: actions/cache@v3
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Install Pub Packages
        run: flutter pub get
        working-directory: project

      - name: Cache Homebrew
        id: brew-cache
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/Homebrew
            ~/.brew-cache
          key: ${{ runner.os }}-brew-cache

      - name: Install Homebrew and Fastlane if not cached
        if: steps.brew-cache.outputs.cache-hit != 'true'
        run: |
          export HOMEBREW_CACHE="$HOME/.brew-cache"
          mkdir -p $HOMEBREW_CACHE
          brew install fastlane

      - name: Cache Ruby Gems
        id: gems-cache
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install Bundler and Fastlane (Ruby) if not cached
        if: steps.gems-cache.outputs.cache-hit != 'true'
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install || true

      - name: Setup Java 17 + Gradle cache
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
          cache: gradle

      - name: Cache Android SDK NDK tools
        uses: actions/cache@v3
        with:
          path: |
            /Users/runner/Library/Android/sdk/ndk
          key: ${{ runner.os }}-ndk-cache
          restore-keys: |
            ${{ runner.os }}-ndk-

      - name: Setup Android/iOS Secrets
        run: |
          echo "${{ secrets.IOS_API_KEY_JSON }}" | base64 --decode > project/ios/ios_api_key.json
          echo "${{ secrets.KEYPROP_PROPERTIES }}" | base64 --decode > project/android/key.properties
          echo "${{ secrets.KEY_JKS }}" | base64 --decode > project/android/key.jks
          mkdir -p project/assets/config/android
          echo "${{ secrets.ANDROID_SERVICE_JSON }}" | base64 --decode > project/assets/config/android/api_key_info.json
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "${{ secrets.IOS_PROVISION_PROFILE }}" | base64 --decode > project/ios//profile.mobileprovision

      - name: Install Apple Provisioning Profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "${{ secrets.IOS_PROVISION_PROFILE }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/${{ secrets.IOS_PROVISION_PROFILE_NAME }}.mobileprovision
     
      - name: Debug Provisioning Profile
        run: ls -la ~/Library/MobileDevice/Provisioning\ Profiles && file ~/Library/MobileDevice/Provisioning\ Profiles/*
      
      - name: Import iOS Certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.KEY_P12 }}
          p12-password: ${{ secrets.IOS_CERT_PASSWORD }}

      - name: Get iOS App version from App Store
        run: fastlane version_update --verbose
        working-directory: project/ios

      - name: Configuring Xcode project
        run: fastlane configXcode --verbose
        working-directory: project/ios

      - name: Reading ExportOptions
        run: cat ExportOptions.plist
        working-directory: project/ios

      - name: Build Android AAB
        run: flutter build appbundle --no-tree-shake-icons
        working-directory: project

      - name: Build iOS IPA
        run: flutter build ipa --export-options-plist=ios/ExportOptions.plist --no-tree-shake-icons
        working-directory: project



      # - name: Publish Android
      #   run: fastlane beta
      #   working-directory: project/android

      # - name: Publish iOS
      #   run: fastlane beta
      #   working-directory: project/ios

      # - name: Notify Upload Success
      #   run: |
      #     CONFIG_FILE="project/assets/config/config.json"
      #     engineName=$(grep 'engineName' "$CONFIG_FILE" | awk -F': ' '{print $2}' | tr -d '",')
      #     businessIdeaId=$(grep 'businessIdeaId' "$CONFIG_FILE" | awk -F': ' '{print $2}' | tr -d '",')
      #     repoName=$(echo "${{ github.repository }}" | cut -d'/' -f2)
      #     url="https://us-central1-$engineName.cloudfunctions.net/notifyOnAppUploadApi"
      #     curl --location "$url" \
      #       --header 'Content-Type: application/json' \
      #       --data "{\"id\": \"$businessIdeaId\", \"repoName\": \"$repoName\", \"platform\": \"Both\"}"
